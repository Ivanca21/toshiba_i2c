/**
 * @file main.c
 * @brief Main function for TOSHIBA_spi application.
 */

/**
 * Any initialization code needed for MCU to function properly.
 * Do not remove this line or clock might not be set correctly.
 */
#ifdef PREINIT_SUPPORTED
#include "preinit.h"
#endif

#include "mcu.h"
#include <stdbool.h>
#include <stdint.h>





typedef struct
{
  volatile uint32_t CR0;               /*!< TSPI Control Register 0                      */
  volatile uint32_t CR1;               /*!< TSPI Control Register 1                      */
  volatile uint32_t CR2;               /*!< TSPI Control Register 2                      */
  volatile uint32_t CR3;               /*!< TSPI Control Register 3                      */
  volatile uint32_t BR;                /*!< TSPI Baud Rate Generator Control Register    */
  volatile uint32_t FMTR0;             /*!< TSPI Format Control Register 0               */
  volatile uint32_t FMTR1;             /*!< TSPI Format Control Register 1               */
  volatile uint32_t SECTCR0;           /*!< TSPI Sector Mode Control Register 0          */
  volatile uint32_t SECTCR1;           /*!< TSPI Sector Mode Control Register 1          */
       uint32_t RESERVED0[55];
  volatile uint32_t DR;                /*!< TSPI Data Register                           */
       uint32_t RESERVED1[63];
  volatile uint32_t SR;                /*!< TSPI Status Register                         */
  volatile uint32_t ERR;               /*!< TSPI Parity Error Flag Register              */
}TSPI1_TypeDef;


TSPI1_TypeDef *spi_register;


typedef struct
{
  volatile uint32_t DATA;              /*!< Port G Data Register                         */
  volatile uint32_t CR;                /*!< Port G Output Control Register               */
  volatile uint32_t FR1;               /*!< Port G Function Register 1                   */
       uint32_t RESERVED0[2];
  volatile uint32_t FR4;               /*!< Port G Function Register 4                   */
  volatile uint32_t FR5;               /*!< Port G Function Register 5                   */
       uint32_t RESERVED1[3];
  volatile uint32_t OD;                /*!< Port G Open Drain Control Register           */
  volatile uint32_t PUP;               /*!< Port G Pull-up Control Register              */
  volatile uint32_t PDN;               /*!< Port G Pull-down Control Register            */
       uint32_t RESERVED2;
  volatile uint32_t IE;                /*!< Port G Input Control Register                */
} PORT_G;

PORT_G *PORT_G_register;

/* tspi kanal 1 type 2 - page 60 */
#define PERIF_BASE        0x40000000UL
#define CH1_TYPE2_BASE   0x00CA400UL

#define BIT3                        (1U << 3)      
#define BIT4                        (1U << 4)
#define BIT0                        (1U << 0)      
#define BIT1                        (1U << 1)      
#define BIT2                        (1U << 2)      
#define BIT5                        (1U << 5)     
#define BIT6                        (1U << 6)    
#define BIT7                        (1U << 7)  

/* MASKS */

/* CR1 */
#define CR1_SWRST10_mask           (0x02 << 6)
#define CR1_SWRST01_mask           (0x01 << 6)
#define CR1_TSPIMS_mask            (0x01 << 13)
#define CR1_MSTR_mask              (0x01 << 12)
#define CR1_TMMD_mask              (0x03 << 10)
#define CR1_CSSEL_mask             (0x03 << 8)
#define CR1_FC_mask                (0xFF << 0)
#define CR1_TRGEN_mask             (0x01 << 15)
#define CR1_TRXE_mask              (0x01 << 14)


/* SECTCR0 */
#define SECTCR0_SECT_mask          (0x01 << 0)


/* SR */
#define SR_TSPISUE_mask            (0x01 << 31)
#define SR_RLVL_mask               (0x0F)
#define SR_TFEMP_mask              (0x000001 << 20)
#define SR_RXEND_mask              (0x000001 << 6)
#define SR_RFFLL_mask              (0x000001 << 4)
#define SR_TXEND_mask              (0x000001 << 22)
#define SR_TLVL_mask               (0x0000000F << 16)

/* CR0 */
#define CR0_TSPIE_mask             (0x01 << 0)

/* FMTR0 */
#define FMTR0_DIR_mask             (0x01 << 31)
#define FMTR0_CS0POL_mask          (0x01 << 16)
#define FMTR0_CKPOL_mask           (0x01 << 14)
#define FMTR0_CKPHA_mask           (0x01 << 15)


/* CR2 */
#define CR0_TIDLE_postition    22
#define CR0_TIDLE_mask         (0x000003 << CR0_TIDLE_postition)



#define TSPI_CR1_FC_Pos      0u
#define TSPI_CR1_FC_Msk      (0xFFu << TSPI_CR1_FC_Pos)

#define TSPI_CR1_FC(val)        (((uint32_t)(val) << TSPI_CR1_FC_Pos) & TSPI_CR1_FC_Msk)
#define TSPI_CR2_TIDLE(val)     (((uint32_t)(val) << CR0_TIDLE_postition) & CR0_TIDLE_mask)

#define MIKROBUS_1    false   
#define MIKROBUS_2    false
#define MIKROBUS_3    false
#define MIKROBUS_4    true


void spi_init();

static void spi_write_frame(uint32_t address, uint8_t data);

uint8_t spi_read_frame(uint32_t address);


static inline void tspi_set_frame_count(TSPI1_TypeDef *spi, uint8_t fc);

static inline void tspi_set_TIDLE(TSPI1_TypeDef *spi, uint8_t tidle);


static inline void assert_CS(){
    if(MIKROBUS_1){
        //PG0:
        TSB_PG->DATA &= ~BIT0;
    }else if(MIKROBUS_2){
        //PG1:
        TSB_PG->DATA &= ~BIT1;
    }else if(MIKROBUS_3){
        //PB7:
        TSB_PB->DATA &= ~BIT7;
    }else if(MIKROBUS_4){
        //PC7:
        TSB_PC->DATA &= ~BIT7;
    }
    
}

static inline void deassert_CS(){
     if(MIKROBUS_1){
        //PG0:
        TSB_PG->DATA |= BIT0;
    }else if(MIKROBUS_2){
        //PG1:
        TSB_PG->DATA |= BIT1;
    }else if(MIKROBUS_3){
        //PB7:
        TSB_PB->DATA |= BIT7;
    }else if(MIKROBUS_4){
        //PC7:
        TSB_PC->DATA |= BIT7;
    }
}

static void spi_master_write(uint8_t* arr, uint8_t data_length);

void sram_click_1_write(uint32_t address, uint8_t data_to_be_written);

void spi_master_write_then_read( uint8_t* write_data_buff, uint32_t write_data_len, uint8_t* read_data_buff, uint32_t read_data_len );

void sram_click_1_read( uint32_t address, uint8_t* read_buff, uint32_t read_data_len);

bool arr_equal(uint8_t* read_buffer, uint8_t* write_buffer);

static inline void wait_tx_fifo_empty();

static inline void wait_rx_fifo_rady();

static inline void flush_rx_fifo();

bool rx_fifo_full();














int main(void)
{
    /* Do not remove this line or clock might not be set correctly. */
    #ifdef PREINIT_SUPPORTED
    preinit();
    #endif

    TSB_CG_FSYSMENA_IPMENA09 = 1; // Enable clock for PORTK.
    TSB_PK->DATA &= ~BIT1;
    TSB_PK->CR |= BIT1;

    //spi_register = PERIF_BASE + CH1_TYPE2_BASE;
    spi_register = (TSPI1_TypeDef *)(PERIF_BASE + CH1_TYPE2_BASE);
    PORT_G_register = (PORT_G *)(0x40000000UL + 0x00E0600UL);

    
    spi_init();

    /*=========================================================== TEST1 ==========================================================*/

    //    spi_write_frame(0x00000001, 0xAB);

    //   uint8_t recieved_data = spi_read_frame(0x00000001);

    /*=========================================================== TEST2 ==========================================================*/

    // uint8_t arr[30] = {0};
    // arr[0] = 0x02;
    // arr[1] = 0x00;
    // arr[2] = 0x00;
    // arr[3] = 0x01;
    // for(uint8_t i =4; i < 30; i++){
    //     arr[i] = i;
    // }

    // spi_master_write(arr, 30);

    /*=========================================================== TEST3 ==========================================================*/

    // sram_click_1_write(0x000001, 0xAB);

    /*=========================================================== TEST4 ==========================================================*/

    // for(uint8_t i = 0; i < 10; i++){
    //     sram_click_1_write(i,i);
    // } 
    //  uint8_t read_arr[10] = {0};
    // uint8_t local_array[4] = {0};

    // local_array[0] = 0x03;
    // local_array[1] = 0x000000 >> 16;
    // local_array[2] = 0x000000 >> 8;
    // local_array[3] = 0x000000;

    // spi_master_write_then_read(local_array, 4, read_arr, 10 );

    /*=========================================================== TEST5 ==========================================================*/

    uint8_t read_buff[10] = {0};
    uint8_t write_buff[10] = {0};



     for(uint8_t i = 0; i < 10; i++){
         sram_click_1_write(i,i);
         write_buff[i] = i;

     }
    
    sram_click_1_read(0x000000, read_buff, 10);

    bool flag = 0;

    flag = arr_equal(write_buff, read_buff);

    if(flag){
        TSB_PK->DATA |= BIT1;
    }


    

    /* Replace with your application code */
    while (1)
    {
    }

    return 0;
}



static inline void wait_tx_fifo_empty(){
    /* cekaj da se isprazni transmit FIFO */
    while ((spi_register->SR & SR_TFEMP_mask) == 0){}
}

static inline void wait_rx_fifo_rady(){
    /* cekaj da se zavrsi prijem */
    while ((spi_register->SR & SR_RXEND_mask) == 0) {}
}

static inline void tspi_set_frame_count(TSPI1_TypeDef *spi, uint8_t fc)
{
    /* set CR1_FC bits */
    uint32_t reg = spi->CR1 & ~TSPI_CR1_FC_Msk;   
    reg |= TSPI_CR1_FC(fc);                       
    spi->CR1  = reg;                              
}


static inline void tspi_set_TIDLE(TSPI1_TypeDef *spi, uint8_t tidle_bits)
{
    /* set CR2_TIDLE bits */
    uint32_t reg = spi->CR2 & ~CR0_TIDLE_mask;  
    reg |= TSPI_CR2_TIDLE(tidle_bits);               
    spi->CR2  = reg;                             
}

static inline void flush_rx_fifo(){
    /* empty RX FIFO */
    while (spi_register->SR & SR_RLVL_mask) (void)spi_register->DR; 
}



void spi_init(){
    /* clock enable */
    TSB_CG_FSYSMENA_IPMENA06 = 1;     /* PORT G */
    TSB_CG_FSYSMENA_IPMENA20 = 1;     /* TSPI ch1 */
    TSB_CG_FSYSMENA_IPMENA01 = 1;     /* PORT B */
    TSB_CG_FSYSMENA_IPMENA02  = 1;    /* PORT C */

    /* set correct CS based on a MIKROBUS */
    if(MIKROBUS_1){
        //PG0:
        TSB_PG -> DATA |= BIT0;
        TSB_PG -> CR |= BIT0;
        TSB_PG -> IE &= ~BIT0;
    }else if(MIKROBUS_2){
        //PG1:
        TSB_PG -> DATA |= BIT1;
        TSB_PG -> CR |= BIT1;
        TSB_PG -> IE &= ~BIT1;
    }else if(MIKROBUS_3){
        //PB7:
        TSB_PB -> DATA |= BIT7;
        TSB_PB -> CR |= BIT7;
        TSB_PB -> IE &= ~BIT7;
    }else if(MIKROBUS_4){
        //PC7:
        TSB_PC -> DATA |= BIT7;
        TSB_PC -> CR |= BIT7;
        TSB_PC -> IE &= ~BIT7;
    }

    /* PG6 -> SCK */
    TSB_PG -> FR1 |= BIT6;
    TSB_PG -> CR |= BIT6;
    TSB_PG -> IE &= ~BIT6;

    /* PG4 -> MISO */
    TSB_PG -> CR &= ~BIT4;
    TSB_PG -> FR1 |= BIT4;
    TSB_PG -> IE |= BIT4;

    /* PG5 -> MOSI */
    TSB_PG -> CR |= BIT5;
    TSB_PG -> FR1 |= BIT5;
    TSB_PG -> IE &= ~BIT5;
    
       
    /* 
    writing CR0_SWRST : 10 -> 01 does a software reset
    software reseting will set SR_TSPISUE = 0 which means TSPI modification is enabled
    setting TRXE/TRGEN = 1 will set SR_TSPISUE = 1 -> modification disabled
    */
    spi_register -> CR0 = CR1_SWRST10_mask;
    spi_register -> CR0 = CR1_SWRST01_mask;

    /*
     "Set <TSPIE> = 1 (operation) to start operation first. 
     Then perform initialization and communications.
     <TSPIE> is not initialized by software reset." - page 61
    */
     spi_register ->CR0 |= CR0_TSPIE_mask;
    
    /* wait for SR_TSPISUE to clear due to software reseting */
    while (spi_register->SR & SR_TSPISUE_mask) {}

    
    /* select FRAME mode */
    spi_register -> SECTCR0 &= ~SECTCR0_SECT_mask;


    /* MASTER, SPI MODE, FUL DUPLEX, BURST FRAME transfer, TSPIxCS1, trigger control not used  */
    spi_register -> CR1 = 0x00001D05;

    /* set MOSI to be LOW LEVEL when in idle state */
    tspi_set_TIDLE(spi_register, 2  );
   
    /*set baud rate*/
    spi_register -> BR = 0x03;

     /* MSB first, frame length = 8bits, CS1 negative logic, data sampled on first edge,SCK at LOW LEVER when idle */
     spi_register -> FMTR0 = 0x88000411;

    
}


static void spi_write_frame(uint32_t address, uint8_t data){
    
     /*
     SRAM datasheet: 
     transmit : 1.0x02 -> write command , 2. 24bit address(1st seven msb bits dont matter), 3.8bit data
     */

     flush_rx_fifo();                                    /* make sure data transfer doesnt get blocked at the sart in case rx fifo is full from previous transfer */

     spi_register->DR = 0x02;
     spi_register->DR = address >> 16;
     spi_register->DR = address >>8;
     spi_register->DR = address;
     spi_register->DR = data;
     
            
      assert_CS();                                       
      spi_register->CR1 |= CR1_TRXE_mask;                /* enable communication -> this will set TSPISUE which disabled modification */
            
     

      wait_tx_fifo_empty();

      
      spi_register->CR1 &= ~CR1_TRXE_mask;               /* stop communication */
       
      while (spi_register->SR & SR_TSPISUE_mask) {}      /* wait untill modification is enabled */

      spi_register->SR |= SR_RXEND_mask;

      deassert_CS();




}


uint8_t spi_read_frame(uint32_t address)
{
    /*
     SRAM datasheet:
     recieve : 1.0x03 -> read command , 2. 24bit address(1st seven msb bits dont matter), 3.dummy bit
     */
     assert_CS(); 

    flush_rx_fifo();


    spi_register->DR = 0x03; 
    spi_register->DR = address >> 16;
    spi_register->DR = address >> 8;
    spi_register->DR = address;            
    spi_register->DR = 0x00;   

    spi_register->CR1 |= CR1_TRXE_mask;  //sve jedno da li pre ovo pre ili posle punjenja tx fifo-a          

    uint8_t data;

    for(uint8_t i = 0; i < 5; i++){
       while ((spi_register->SR & SR_RLVL_mask) == 0) {}
       data = spi_register->DR;
    }


    spi_register->CR1 &= ~CR1_TRXE_mask;
    while (spi_register->SR & SR_TSPISUE_mask) { }
    deassert_CS();

    return data;

}


static void spi_master_write(uint8_t* arr, uint8_t data_length){


    flush_rx_fifo();

    tspi_set_frame_count(spi_register, data_length);   

    uint8_t data = 0;

    if(data_length > 8){
        for(int i = 0; i < 8; i++){
            spi_register->DR = arr[i];
        }
        assert_CS();
        spi_register->CR1 |= CR1_TRXE_mask; 
        for(uint8_t i = 8; i < data_length; i++){
            while(((spi_register->SR & SR_TLVL_mask) >> 16) > 6) {}
            data = spi_register->DR;    //cisti odmah rx da se ne zaglavi
            spi_register->DR = arr[i];

        }
    }else{
        for(uint8_t i = 0; i < data_length; i++){
            spi_register->DR = arr[i];
        }
        assert_CS();
        spi_register->CR1 |= CR1_TRXE_mask; 
    }

    wait_tx_fifo_empty();
       

      spi_register->CR1 &= ~CR1_TRXE_mask;
 
      while (spi_register->SR & SR_TSPISUE_mask) {}

      spi_register->SR |= SR_RXEND_mask;

      deassert_CS();

}


void sram_click_1_write(uint32_t address, uint8_t data_to_be_written){
    uint8_t local_array[5] = {0};

    local_array[0] = 0x02;
    local_array[1] = address >> 16;
    local_array[2] = address >> 8;
    local_array[3] = address;
    local_array[4] = data_to_be_written;



    spi_master_write( local_array, 5);     

}


void spi_master_write_then_read( uint8_t* write_data_buff, uint32_t write_data_len, uint8_t* read_data_buff, uint32_t read_data_len ){
    
    uint32_t tx_idx = 0;
    uint32_t rx_idx = 0;
    uint32_t total  = write_data_len + read_data_len;

    /* 1. priprema: resetuj RX-FIFO i podesi brojač frejmova */
    flush_rx_fifo();                       /* isprazni sve stare bajtove          */
    tspi_set_frame_count(spi_register, total);     /* CR1.FC = ukupno bajtova   */

    for(uint8_t i = 0; i < 4; i++){
        spi_register->DR = write_data_buff[i];
    }
    for(uint8_t i = 4; i < 8; i++){
        spi_register->DR = 0x00;
    }

    assert_CS();
    spi_register->CR1 |= CR1_TRXE_mask;

   for(uint8_t i = 0; i < 4; i++){
       while ((spi_register->SR & SR_RLVL_mask) == 0) {} 
       uint8_t data = spi_register->DR;
   }
   uint8_t index;
   for(index = 0; index < read_data_len - 4; index++){
           while ((spi_register->SR & SR_RLVL_mask) == 0) {} 
           read_data_buff[index] = spi_register->DR;
           spi_register->DR = 0x00;
   }

   while ((spi_register->SR & SR_RLVL_mask) == 0) {} 
           read_data_buff[index++] = spi_register->DR;
    while ((spi_register->SR & SR_RLVL_mask) == 0) {} 
           read_data_buff[index++] = spi_register->DR;
    while ((spi_register->SR & SR_RLVL_mask) == 0) {} 
           read_data_buff[index++] = spi_register->DR;
    while ((spi_register->SR & SR_RLVL_mask) == 0) {} 
           read_data_buff[index] = spi_register->DR;



    /* 6. STOP – TRXE=0, čekaj da se TSPISUE spusti pa podigni CS */
    spi_register->CR1 &= ~CR1_TRXE_mask;
    while (spi_register->SR & SR_TSPISUE_mask) ;
    deassert_CS();
}




void sram_click_1_read( uint32_t address, uint8_t* read_buff, uint32_t read_data_len){
    uint8_t local_array[4] = {0};

    local_array[0] = 0x03;
    local_array[1] = address >> 16;
    local_array[2] = address >> 8;
    local_array[3] = address;

    spi_master_write_then_read(local_array, 4, read_buff, read_data_len );
 
}

bool arr_equal(uint8_t* read_buffer, uint8_t* write_buffer){
      for(uint8_t i = 0; i < 10; i++){
        if(read_buffer[i] != write_buffer[i]){
               return false;
        }
    }
    return true;
}


bool rx_fifo_full(){

    if((spi_register->SR & SR_RFFLL_mask) != 0){
        return true;
    }else{
        return false;
    }
    

}







