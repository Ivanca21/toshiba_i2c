/**
 * @file main.c
 * @brief Main function for TOSHIBA_spi application.
 */

/**
 * Any initialization code needed for MCU to function properly.
 * Do not remove this line or clock might not be set correctly.
 */
#ifdef PREINIT_SUPPORTED
#include "preinit.h"
#endif

#include "mcu.h"
#include <stdbool.h>
#include <stdint.h>


typedef struct
{
  volatile uint32_t CR0;               /*!< TSPI Control Register 0                      */
  volatile uint32_t CR1;               /*!< TSPI Control Register 1                      */
  volatile uint32_t CR2;               /*!< TSPI Control Register 2                      */
  volatile uint32_t CR3;               /*!< TSPI Control Register 3                      */
  volatile uint32_t BR;                /*!< TSPI Baud Rate Generator Control Register    */
  volatile uint32_t FMTR0;             /*!< TSPI Format Control Register 0               */
  volatile uint32_t FMTR1;             /*!< TSPI Format Control Register 1               */
  volatile uint32_t SECTCR0;           /*!< TSPI Sector Mode Control Register 0          */
  volatile uint32_t SECTCR1;           /*!< TSPI Sector Mode Control Register 1          */
       uint32_t RESERVED0[55];
  volatile uint32_t DR;                /*!< TSPI Data Register                           */
       uint32_t RESERVED1[63];
  volatile uint32_t SR;                /*!< TSPI Status Register                         */
  volatile uint32_t ERR;               /*!< TSPI Parity Error Flag Register              */
}TSPI1_TypeDef;


TSPI1_TypeDef *spi_register;

/* tspi kanal 1 type 2 - page 60 */
#define PERIF_BASE        0x40000000UL
#define CH1_TYPE2_BASE   0x00CA400UL

#define BIT3                        (1U << 3)      
#define BIT4                        (1U << 4)
#define BIT0                        (1U << 0)      
#define BIT1                        (1U << 1)      
#define BIT2                        (1U << 2)      
#define BIT5                        (1U << 5)     
#define BIT6                        (1U << 6)    
#define BIT7                        (1U << 7)  

/* MASKS */

/* CR1 */
#define CR1_SWRST10_mask      (0x02 << 6)
#define CR1_SWRST01_mask      (0x01 << 6)
#define CR1_TSPIMS_mask       (0x01 << 13)
#define CR1_MSTR_mask         (0x01 << 12)
#define CR1_TMMD_mask         (0x03 << 10)
#define CR1_CSSEL_mask        (0x03 << 8)
#define CR1_FC_mask           (0xFF << 0)
#define CR1_TRGEN_mask        (0x01 << 15)
#define CR1_TRXE_mask         (0x01 << 14)


/* SECTCR0 */
#define SECTCR0_SECT_mask         (0x01 << 0)


/* SR */
#define SR_TSPISUE_mask     (0x01 << 31)

/* CR0 */
#define CR0_TSPIE_mask      (0x01 << 0)

/* FMTR0 */
#define FMTR0_DIR_mask      (0x01 << 31)
#define FMTR0_CS0POL_mask   (0x01 << 16)
#define FMTR0_CKPOL_mask    (0x01 << 14)
#define FMTR0_CKPHA_mask    (0x01 << 15)





int main(void)
{
    /* Do not remove this line or clock might not be set correctly. */
    #ifdef PREINIT_SUPPORTED
    preinit();
    #endif

    //spi_register = PERIF_BASE + CH1_TYPE2_BASE;
    spi_register = (TSPI1_TypeDef *)(PERIF_BASE + CH1_TYPE2_BASE);

    /* clock enable for PG and SPI*/
    TSB_CG_FSYSMENA_IPMENA06 = 1;
    TSB_CG_FSYSMENA_IPMENA19 = 1;

    /*
    MIKROBUS 2:
    CS - PG1
    SCK - PG6
    MISO - PG4
    MOSI - PG5
    */
    TSB_PG -> CR |= BIT1;
    TSB_PG -> FR1 |= BIT1;
    TSB_PG -> IE &= ~BIT1;

    TSB_PG -> CR |= BIT6;
    TSB_PG -> FR1 |= BIT6;
    TSB_PG -> IE &= ~BIT6;

    TSB_PG -> CR &= ~BIT4;
    TSB_PG -> FR1 |= BIT4;
    TSB_PG -> IE |= BIT4;

    TSB_PG -> CR |= BIT5;
    TSB_PG -> FR1 |= BIT5;
    TSB_PG -> IE &= ~BIT5;
    
    /*======================================================SPI INIT======================================================================  */

    /*
     Set <TSPIE> = 1 (operation) to start operation first. 
     Then perform initialization and communications.
     <TSPIE> is not initialized by software reset. - page 61
    */
    spi_register ->CR0 |= CR0_TSPIE_mask;
    
    /* 1. software reset */
    spi_register -> CR0 = CR1_SWRST10_mask;
    spi_register -> CR0 = CR1_SWRST01_mask;
    

    /* select FRAME mode */
    spi_register -> SECTCR0 &= ~SECTCR0_SECT_mask;

    /*
    2. Enable TSPI_SR modification() 
    When <TSPISUE> is "0", the TSPI is not transmitting or receiving, thus
    the register setting can be modified.
    <TSPISUE> is "0" in the following conditions: 
    1.Software reset occurs
    */
    spi_register -> SR &= ~SR_TSPISUE_mask;

    /* 3. CR1:  */
    spi_register -> CR1 |= CR1_MSTR_mask;            /* MASTER */
    spi_register -> CR1 &= ~CR1_TSPIMS_mask;          /* SPI MDOE */
    spi_register -> CR1 |= CR1_TMMD_mask;             /* FULL DUPLEX */
    spi_register -> CR1 &= ~CR1_CSSEL_mask;           /* TSPIxCS0 is valid */
    spi_register -> CR1 &= ~CR1_FC_mask;              /* continuous transfer */
    spi_register -> CR1 &= ~CR1_TRGEN_mask;           /* trigger control not used */


    /*
     CR1 NOTES:
     FULL DUPLEX start transmit/receive transfer : CR1_TRXE = 1;
    */

    /*badu rate*/
    spi_register -> BR = 0x03;
    
    /* FMTR0 */
    /* po defaultu je 8 bita velicnina frame-a */
    // spi_register -> FMTR0 |= FMTR0_DIR_mask;           /* MSB FIRST */
    // spi_register -> FMTR0 &= ~FMTR0_CS0POL_mask;       /* NEGATIVE LOGIC FOR CS0*/
    // spi_register -> FMTR0 |= FMTR0_CKPHA_mask;         /* DATA IS SAMPLED ON THE SECOND EDGE */
    // spi_register -> FMTR0 |= FMTR0_CKPOL_mask;         /* TSPIxSCK IS 'HIGH' LEVEL AT IDLE */spi_
    spi_register -> FMTR0 = 0x88000411;
    
    /*
     FMTR0 NOTES:
      All data in the FIFO are discarded if <FL[5:0]> is changed remaining data in the FIFO even if
     [TSPIxSR]<TSPISUE> is "0".

     When use 1st edge data sampling of master operation,
    "Setting value (Integer multiple of TSPIxSCK) + 0.5 Ã— TSPIxSCK".
    */
    
    /* write data to transmit FIFO */
    spi_register -> DR = 0xAB;

     

    /* start transfer */
    spi_register -> CR1 |= CR1_TRXE_mask;

    /* Replace with your application code */
    while (1)
    {
    }

    return 0;
}
